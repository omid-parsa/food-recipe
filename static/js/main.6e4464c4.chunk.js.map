{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","food","image","title","CardList","foods","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","results","this","filterFoods","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAGaA,G,kBAAO,SAAAC,GAChB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,KAAKC,QACrB,4BAAKJ,EAAMG,KAAKE,UCHfC,EAAW,SAAAN,GAEpB,OAAQ,yBAAKC,UAAU,aAEfD,EAAMO,MAAMC,KAAK,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAMM,IAAKN,EAAKO,GAAIP,KAAMA,SCJlDQ,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,2BAAOZ,UAAU,SAASa,KAAK,SAC/BF,YAAaA,EACbG,SAAUF,MCgCHG,E,kDAhCb,aAAgB,IAAD,8BACb,gBAWFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXrC,EAAKC,MAAO,CACTf,MAAO,GACPY,YAAa,IAJJ,E,gEAOM,IAAD,OAClBI,MAAM,yGACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAjB,GAAK,OAAG,EAAKW,SAAU,CAACX,MAAOA,EAAMoB,e,+BAKnC,IAAD,EACsBC,KAAKN,MAA3Bf,EADA,EACAA,MAAOY,EADP,EACOA,YACTU,EAAatB,EAAMuB,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAM0B,cAAcC,SAASb,EAAYY,kBACtF,OACE,yBAAK9B,UAAU,OACb,4CAEA,kBAAC,EAAD,CAAWW,YAAY,cAAcC,aAAgBe,KAAKf,eAE1D,kBAAC,EAAD,CAAUN,MAAQsB,S,GAzBRI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e4464c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={props.food.image} />\r\n            <h2>{props.food.title}</h2>\r\n        </div>        \r\n    );\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card} from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    \r\n    return  <div className='card-list'>\r\n        {\r\n            props.foods.map( food => <Card key={food.id} food={food}/>)\r\n        }\r\n    </div>;\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => {\r\n    return (\r\n        <input className='search' type='search'\r\n        placeholder={placeholder} \r\n        onChange={handleChange} />\r\n    );\r\n}","import React, {Component} from 'react';\nimport './App.css';\n\n//Components\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor () {\n    super();\n     this.state= {\n        foods: [],\n        searchField: ''\n     }\n  }\n  componentDidMount() {\n    fetch('https://api.spoonacular.com/recipes/complexSearch?apiKey=71504aa4cb664ea7879a8ffda25b8597&query=pasta')\n    .then( response => response.json())\n    .then( foods=> this.setState( {foods: foods.results}) );\n  }\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n  render () {\n    const { foods, searchField} = this.state; // this is destructuring, breaking an object to its including.\n    const filterFoods= foods.filter(food => food.title.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Food to Cook</h1>\n        {/* {console.log(this.state.foods)} */}\n        <SearchBox placeholder='search food' handleChange= { this.handleChange } /> \n        {/* about the above line // we do not pass e or event to this method because the event is binded with it */}\n        <CardList foods= {filterFoods}>\n        \n        </CardList>      \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}